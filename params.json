{"name":"Angular-elastic-builder","tagline":"This is an Angular.js directive for building an Elasticsearch query. You just give it the fields and can generate a query for it.","body":"# Angular Elasticsearch Query Builder\r\n\r\n[![NPM version][npm-image]][npm-url]\r\n![Bower version][bower-image]\r\n[![Downloads][downloads-image]][downloads-url]\r\n[![Tips][gratipay-image]][gratipay-url]\r\n\r\nThis is an Angular.js directive for building an [Elasticsearch](https://www.elastic.co/) query.\r\nYou just give it the fields and can generate a query for it. Its layout is defined using [Bootstrap](http://getbootstrap.com/) classes, but you may also choose to just style it yourself.\r\n\r\nIt's still pretty early on, as it doesn't support a whole lot of use-cases, but we need to make it awesome. Contributions accepted.\r\n\r\n## Try it Out\r\n[View an example here](http://dncrews.github.io/angular-elastic-builder/examples/)\r\n\r\n## Usage\r\n\r\n### Dependency\r\nNotice: this plugin requires the [Angular Recursion](https://github.com/marklagendijk/angular-recursion) module.\r\n\r\n### Installation\r\nFirst you'll need to download the [dist](https://github.com/dncrews/angular-elastic-builder/tree/master/dist) files and include this JS file to your app (don't forget to substitute `x.x.x` with the current version number), along with the RecursionHelper, if you're not already using it.\r\n```html\r\n<script type=\"text/javascript\" src=\"/angular-recursion.min.js\"></script>\r\n<script type=\"text/javascript\" src=\"/angular-elastic-builder.min.js\"></script>\r\n```\r\n\r\nThen make sure that it's included in your app's dependencies during module creation.\r\n\r\n```js\r\nangularmodule('appName', [ 'angular-elastic-builder' ]);\r\n```\r\n\r\nThen you can use it in your app\r\n```js\r\n/* Controller code */\r\n\r\n/**\r\n * The elasticBuilderData object will be modified in place so that you can use\r\n * your own $watch, and/or your own saving mechanism\r\n */\r\n$scope.elasticBuilderData = {};\r\n$scope.elasticBuilderData.query = [];\r\n\r\n/**\r\n * This object is the lookup for what fields\r\n * are available in your database, as well as definitions of what kind\r\n * of data they are\r\n */\r\n$scope.elasticBuilderData.fields = {\r\n  'some.number.field': { type: 'number' },\r\n  'some.term.field': { type: 'term' },\r\n  'some.boolean.field': { type: 'term', subType: 'boolean' },\r\n  'multi.selector': { type: 'multi', choices: [ 'AZ', 'CA', 'CT' ]}\r\n};\r\n```\r\n\r\n```html\r\n<div data-elastic-builder=\"elasticBuilderData\"></div>\r\n```\r\n\r\nThe above elasticFields would allow you create the following form:\r\n![Screenshot][screenshot-image]\r\n\r\nWhich represents the following Elasticsearch Query:\r\n```json\r\n[\r\n  {\r\n    \"terms\": {\r\n      \"multi.selector\": [\r\n        \"AZ\",\r\n        \"CT\"\r\n      ]\r\n    }\r\n  },\r\n  {\r\n    \"term\": {\r\n      \"some.boolean.field\": \"0\"\r\n    }\r\n  },\r\n  {\r\n    \"not\": {\r\n      \"filter\": {\r\n        \"term\": {\r\n          \"some.term.field\": \"Hello World\"\r\n        }\r\n      }\r\n    }\r\n  },\r\n  {\r\n    \"and\": [\r\n      {\r\n        \"range\": {\r\n          \"some.number.field\": {\r\n            \"gte\": 0\r\n          }\r\n        }\r\n      },\r\n      {\r\n        \"range\": {\r\n          \"some.number.field\": {\r\n            \"lt\": 100\r\n          }\r\n        }\r\n      }\r\n    ]\r\n  }\r\n]\r\n```\r\n\r\n\r\n### Field Options\r\n  - `type`: This determines how the fields are displayed in the form.\r\n    - Currently supported:\r\n      - `'number'`: in addition to Generic Options, gets \"&gt;\", \"&ge;\", \"&lt;\", \"&le;\", \"=\"\r\n      - `'term'`: in addition to Generic Options, gets \"Equals\" and \"! Equals\"\r\n      - `'boolean'`: Does not get Generic Options. Gets `true` and `false`\r\n        - These are actually \"equals 0\" and \"equals 1\" for the database query\r\n\r\nGeneric Options\r\n  - In addition to any specific options for fields, all fields also get a \"Exists\" and \"! Exists\" option\r\n\r\n\r\n## External Changes && Initial State\r\nIf you want to pass in an initial state (or if you make changes to the query externally), you'll need to\r\nset the configuration flag `needsUpdate` to `true`. Any time this flag changes to `true`, this directive\r\nwill overwrite the current state and data with whatever is now defined in your configuration object.\r\n\r\n\r\n## Local Development\r\nTo work on this module locally, you will need to clone it and run `gulp watch`. This will ensure that your changes get compiled properly. You will also need to make sure you run `gulp` to build the \"dist\" files before commit.\r\n\r\n\r\n[npm-image]: https://img.shields.io/npm/v/angular-elastic-builder.svg\r\n[npm-url]: https://www.npmjs.org/package/angular-elastic-builder\r\n[bower-image]: https://img.shields.io/bower/v/angular-elastic-builder.svg\r\n[downloads-image]: https://img.shields.io/npm/dm/angular-elastic-builder.svg\r\n[downloads-url]: https://www.npmjs.org/package/angular-elastic-builder\r\n[gratipay-image]: https://img.shields.io/gratipay/dncrews.svg\r\n[gratipay-url]: https://www.gratipay.com/dncrews/\r\n[screenshot-image]: https://raw.githubusercontent.com/dncrews/angular-elastic-builder/master/screenshot.png\r\n","google":"UA-48272307-2","note":"Don't delete this file! It's used internally to help with page regeneration."}